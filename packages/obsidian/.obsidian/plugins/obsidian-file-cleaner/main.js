/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
__export(exports, {
  default: () => FileCleanerPlugin
});
var import_obsidian4 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/translations/helper.ts
var import_obsidian = __toModule(require("obsidian"));

// src/translations/locale/en.ts
var en_default = {
  "Clean files": "Clean files",
  "Regular Options": "Regular Options",
  "Cleaned files": "Cleaned files",
  "What do you want to do with cleaned files?": "What do you want to do with cleaned files?",
  "Move to system trash": "Move to system trash",
  "Move to Obsidian trash (.trash folder)": "Move to Obsidian trash (.trash folder)",
  "Permanently delete": "Permanently delete",
  "Excluded Folders": "Excluded Folders",
  "Files in excluded folders will not be cleaned up. Paths are case-sensitive, each path is separated by a newline. Example: folder/subfolder": "Files in excluded folders will not be cleaned up. Paths are case-sensitive, each path is separated by a newline. Example: folder/subfolder",
  "Clean successful": "Clean successful",
  "No file to clean": "No file to clean"
};

// src/translations/locale/zh-cn.ts
var zh_cn_default = {
  "Clean files": "\u6E05\u7406\u6587\u4EF6",
  "Regular Options": "\u5E38\u89C4\u9009\u9879",
  "Cleaned files": "\u6E05\u7406\u6587\u4EF6",
  "What do you want to do with cleaned files?": "\u8981\u5982\u4F55\u5904\u7406\u5DF2\u6E05\u7406\u7684\u6587\u4EF6\uFF1F",
  "Move to system trash": "\u79FB\u81F3\u7CFB\u7EDF\u56DE\u6536\u7AD9",
  "Move to Obsidian trash (.trash folder)": "\u79FB\u81F3\u8F6F\u4EF6\u56DE\u6536\u7AD9\uFF08.trash \u6587\u4EF6\u5939\uFF09",
  "Permanently delete": "\u6C38\u4E45\u5220\u9664",
  "Excluded Folders": "\u6392\u9664\u6587\u4EF6\u5939",
  "Files in excluded folders will not be cleaned up. Paths are case-sensitive, each path is separated by a newline. Example: folder/subfolder": "\u6392\u9664\u6587\u4EF6\u5939\u4E2D\u7684\u6587\u4EF6\u5C06\u4E0D\u4F1A\u88AB\u6E05\u7406\u3002\u8DEF\u5F84\u533A\u5206\u5927\u5C0F\u5199\uFF0C\u6BCF\u4E2A\u8DEF\u5F84\u7531\u6362\u884C\u7B26\u5206\u9694\u3002\u793A\u4F8B\uFF1A\u6587\u4EF6\u5939/\u5B50\u6587\u4EF6\u5939",
  "Clean successful": "\u6E05\u7406\u6210\u529F",
  "No file to clean": "\u6CA1\u6709\u6587\u4EF6\u9700\u8981\u6E05\u7406"
};

// src/translations/helper.ts
var localeMap = {
  en: en_default,
  "zh-cn": zh_cn_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function t(str) {
  return locale && locale[str] || en_default[str];
}

// src/settings.ts
var DEFAULT_SETTINGS = {
  destination: "system",
  excluded: ""
};
var FileCleanerSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    this.containerEl.empty();
    this.containerEl.createEl("h1", { text: t("Regular Options") });
    new import_obsidian2.Setting(containerEl).setName(t("Cleaned files")).setDesc(t("What do you want to do with cleaned files?")).addDropdown((dropdown) => dropdown.addOption("system", t("Move to system trash")).addOption("obsidian", t("Move to Obsidian trash (.trash folder)")).addOption("permanent", t("Permanently delete")).setValue(this.plugin.settings.destination).onChange((value) => {
      this.plugin.settings.destination = value;
      this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName(t("Excluded Folders")).setDesc(t("Files in excluded folders will not be cleaned up. Paths are case-sensitive, each path is separated by a newline. Example: folder/subfolder")).addTextArea((text) => text.setValue(this.plugin.settings.excluded).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.excluded = value;
      this.plugin.saveSettings();
    })));
  }
};

// src/util.ts
var import_obsidian3 = __toModule(require("obsidian"));
var cleanFiles = (app, setting) => __async(void 0, null, function* () {
  let mdFiles = app.vault.getMarkdownFiles();
  let emptyMdFiles = [];
  let emptyRegex = /\S/;
  for (let file of mdFiles) {
    let content = yield app.vault.cachedRead(file);
    if (file.stat.size === 0) {
      emptyMdFiles.push(file);
    } else if (!emptyRegex.test(content)) {
      emptyMdFiles.push(file);
    }
  }
  let files = app.vault.getFiles();
  const attachmentRegex = /(.jpg|.jpeg|.png|.gif|.svg|.pdf)$/i;
  let attachments = [];
  for (let file of files) {
    if (file.name.match(attachmentRegex)) {
      attachments.push(file);
    }
  }
  let usedAttachments = [];
  let resolvedLinks = app.metadataCache.resolvedLinks;
  if (resolvedLinks) {
    for (const [mdFile, links] of Object.entries(resolvedLinks)) {
      for (const [path, times] of Object.entries(resolvedLinks[mdFile])) {
        let attachmentMatch = path.match(attachmentRegex);
        if (attachmentMatch) {
          let file = app.vault.getAbstractFileByPath(path);
          usedAttachments.push(file);
        }
      }
    }
  }
  let unusedAttachments = attachments.filter((file) => !usedAttachments.includes(file));
  let excludedFiles = [];
  let cleanFiles2 = emptyMdFiles.concat(unusedAttachments);
  let excludedFolders = setting.excluded;
  let excludedFoldersCleaned = new Set(excludedFolders.split(/\n/).map((folderPath) => {
    return folderPath.trim();
  }));
  excludedFoldersCleaned.delete("");
  for (let excludedFolder of excludedFoldersCleaned) {
    let pathRegex = new RegExp("^" + excludedFolder + "/");
    for (let file of cleanFiles2) {
      if (pathRegex.test(file.path)) {
        excludedFiles.push(file);
      }
    }
  }
  cleanFiles2 = cleanFiles2.concat(excludedFiles).filter((v) => !cleanFiles2.includes(v) || !excludedFiles.includes(v));
  let len = cleanFiles2.length;
  if (len > 0) {
    let destination = setting.destination;
    for (let file of cleanFiles2) {
      console.log(file.name + " cleaned");
      if (destination === "permanent") {
        yield app.vault.delete(file);
      } else if (destination === "system") {
        yield app.vault.trash(file, true);
      } else if (destination === "obsidian") {
        yield app.vault.trash(file, false);
      }
    }
    new import_obsidian3.Notice(t("Clean successful"));
  } else {
    new import_obsidian3.Notice(t("No file to clean"));
  }
});

// src/index.ts
var FileCleanerPlugin = class extends import_obsidian4.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addRibbonIcon("trash", t("Clean files"), (evt) => {
        cleanFiles(this.app, this.settings);
      });
      this.addCommand({
        id: "clean-files",
        name: t("Clean files"),
        callback: () => {
          cleanFiles(this.app, this.settings);
        }
      });
      this.addSettingTab(new FileCleanerSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};


/* nosourcemap */